# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
#
# https://github.com/microsoft/action-psscriptanalyzer
# For more information on PSScriptAnalyzer in general, see
# https://github.com/PowerShell/PSScriptAnalyzer

name: Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  release:
    types: [released]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  PSScriptAnalyzer:
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
      
    name: PSScriptAnalyzer
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run PSScriptAnalyzer
        uses: microsoft/psscriptanalyzer-action@v1.0
        with:
          # Check https://github.com/microsoft/action-psscriptanalyzer for more info about the options.
          # The below set up runs PSScriptAnalyzer to your entire repository and runs some basic security rules.
          path: .\cmdlets\src
          recurse: true
          # Include your own basic security rules. Removing this option will run all the rules
          includeRule: '"PSAvoidGlobalAliases", "PSAvoidUsingConvertToSecureStringWithPlainText"'
          output: results.sarif

      # Upload the SARIF file generated in the previous step
      - name: Upload SARIF results file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif
  
  test:
    name: 'Unit Tests'
    runs-on: ubuntu-latest
    permissions:
      checks: write
      pull-requests: write  
    steps:
      - uses: actions/checkout@v4

      - name: 'Invoke-Pester'
        shell: pwsh
        run: |
          .devcontainer/custom/Install-PowerShellPrerequisites.ps1
          Invoke-Pester ./cmdlets/UnitTests -OutputFile TestResults-UnitTest.xml -OutputFormat JUnitXml

      - name: 'Upload unit test results'
        uses: actions/upload-artifact@v4
        with:
          path: TestResults-UnitTest.xml
          name: TestResults-UnitTest.xml
          

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: |
            TestResults-UnitTest.xml

  publish-to-gallery:
    runs-on: ubuntu-latest
    needs: [test, PSScriptAnalyzer]
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: create parameters for create tag
        id: CreateTagParameter
        shell: pwsh
        run: |
          if ($env:COMMIT_MESSAGE -match '#minor') {
            Write-Host "Setting parameter create to a new minor release version"
            "incremented-value=minor" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
            "prerelease=" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          } else {
            Write-Host "Setting parameter to create a new prerelease patch version"
            "incremented-value=patch" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
            "prerelease=prerelease" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          }
        env:
          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}

      - uses: SOLIDSoftworks/semver-tags@v1
        id: CreateTag
        name: Create Tag
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN}}
          tag-prefix: 'v'
          default-version: '1.2.3'
          incremented-value: '${{ steps.CreateTagParameter.outputs.incremented-value }}'
          prerelease: '${{ steps.CreateTagParameter.outputs.prerelease }}'
          create-release: true
          add-major-tag: true
          add-minor-tag: true

      - name: Build and publish
        shell: pwsh
        run: |
          $PreviousVerionMessage = ("Previous version was '{0}'" -f $env:PREVIOUS_VERSION)
          Write-Host $PreviousVerionMessage
          if (Test-Path Env:GITHUB_STEP_SUMMARY) {
            $PreviousVerionMessage | Out-File -FilePath $Env:GITHUB_STEP_SUMMARY -Encoding utf8 -Append
          }
          . ./cmdlets/nuget/Publish-CdfModule.ps1 -Version $env:VERSION -NuGetApiKey $env:NUGET_API_KEY 
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
          VERSION: ${{ steps.CreateTag.outputs.semantic-version }} 
          PREVIOUS_VERSION: ${{ steps.CreateTag.outputs.previous-version }}

  

          

